datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

/// Field of a digimon
model Field {
  /// Identifier of the field
  id          Int       @id @default(autoincrement())
  /// Name of the field
  name        String    @unique @db.VarChar(255)
  /// Symbol of the field
  symbol      String    @db.VarChar(255)
  /// Description of the field
  description String
  /// List of digimon that belongs to the field
  digimon     Digimon[]
}

/// Rank of a digimon
model Rank {
  /// Identifier of the rank
  id          Int       @id @default(autoincrement())
  /// Name of the rank
  name        String    @unique @db.VarChar(255)
  /// Description of the rank
  description String
  /// List of digimon that belongs to the rank
  digimon     Digimon[]
}

/// Attribute of a digimon
model Attribute {
  /// Identifier of the attribute
  id          Int         @id @default(autoincrement())
  /// Name of the attribute
  name        String      @unique @db.VarChar(255)
  /// Symbol of the attribute
  symbol      String      @db.VarChar(255)
  /// Description of the attribute
  description String
  /// List of attributes that this attribute is stronger against
  strong      Attribute[] @relation("AttrWeakStrong", references: [id])
  /// List of attributes that this attribute is weaker against
  weak        Attribute[] @relation("AttrWeakStrong", references: [id])
  /// List of digimon that belongs to the rank
  digimon     Digimon[]
}

/// Type of a digimon
model Type {
  /// Identifier of the type
  id      Int       @id @default(autoincrement())
  /// Name of the type
  name    String    @unique @db.VarChar(255)
  /// List of digimon that belongs to the type
  digimon Digimon[]
}

/// Creatures made of data
model Digimon {
  /// Id of the digimon
  id           Int            @id @default(autoincrement())
  /// Slug of the digimon
  slug         String         @unique @db.VarChar(255)
  /// Name of the digimon
  name         String         @unique @db.VarChar(255)
  /// True if the digimon is a Jogress, false if not
  isJogress    Boolean        @default(false)
  /// True if the digimon has a X Antibody, false if not
  hasXAntibody Boolean        @default(false)
  /// Rank of the digimon
  rank         Rank           @relation(fields: [rankId], references: [id])
  /// Id of the rank of the digimon
  rankId       Int
  /// Attribute of the digimon
  attribute    Attribute      @relation(fields: [attributeId], references: [id])
  /// Id of the attribute of the digimon
  attributeId  Int
  /// Type of the digimon
  type         Type?          @relation(fields: [typeId], references: [id])
  /// Id of the type of the digimon
  typeId       Int?
  /// Digimental of the digimon
  digimental   Digimental?    @relation(fields: [digimentalId], references: [id])
  /// Id of the digimental of the digimon
  digimentalId Int?
  /// List of movies that the digimon appears
  movies       Movie[]
  /// List of series that the digimon appears
  series       Series[]
  /// List of episodes that the digimon appears
  episodes     Episode[]
  /// List of fields that the digimon belongs
  fields       Field[]
  /// List of spirits that the digimon contains
  spirits      Spirit[]
  /// List of partners that the digimon already had
  partners     Character[]
  /// List of digimon that can envolve into the digimon
  previous     Digimon[]      @relation("PreviousNext", references: [id])
  /// List of digimon that the digimon can envolve into
  next         Digimon[]      @relation("PreviousNext", references: [id])
  /// List of groups that the digimon belongs to
  groups       DigimonGroup[]
  /// List of different names that the digimon have
  otherNames   DigimonName[]
}

/// Name variation of a digimon
model DigimonName {
  /// Identifier of the digimon name
  id        Int     @id @default(autoincrement())
  /// Language wich the digimon name belongs
  lang      String
  /// Another name of a digimon
  name      String
  /// Digimon whom belongs
  digimon   Digimon @relation(fields: [digimonId], references: [id])
  /// Identifier of the digimon whom belongs
  digimonId Int
}

/// Group of digimon
model DigimonGroup {
  /// Identifier of the digimon group
  id          Int       @id @default(autoincrement())
  /// Name of the digimon group
  name        String    @unique
  /// Description of the digimon group
  description String
  /// List of digimon that belongs to the group
  digimon     Digimon[]
}

/// Sort of a timeline, or diferente universe
model Universe {
  /// Identifier of the universe
  id         Int         @id @default(autoincrement())
  /// Name of the universe
  name       String      @unique @db.VarChar(255)
  /// List of series that belongs to the universe
  series     Series[]
  /// List of movies that belongs to the universe
  movies     Movie[]
  /// List of characters that appears in the universe
  characters Character[]
}

/// Animated series of the franchise
model Series {
  /// Identifier of the series
  id              Int         @id @default(autoincrement())
  /// Title of the series
  title           String      @unique @db.VarChar(255)
  /// Synopsis of the series
  synopsis        String
  /// Original air date of the series
  originalAirDate DateTime
  /// List of episodes that belongs to the series
  episodes        Episode[]
  /// List of digimon that appears in the series
  digimon         Digimon[]
  /// List of characters that appears in the series
  characters      Character[]
  /// Universe whom belongs
  universe        Universe    @relation(fields: [universeId], references: [id])
  /// Identifier of the universe whom belongs
  universeId      Int
}

/// Episode of the animated series
model Episode {
  /// Identifier of the episode
  id              Int         @id @default(autoincrement())
  /// Title of the episode
  title           String      @unique @db.VarChar(255)
  /// Synopsis of the episode
  synopsis        String
  /// Original air date of the episode
  originalAirDate DateTime
  /// List of digimon that appears in the episode
  digimon         Digimon[]
  /// List of characters that appears in the episode
  characters      Character[]
  /// Series whom belongs
  series          Series      @relation(fields: [seriesId], references: [id])
  /// Identifier of the series whom belongs
  seriesId        Int
}

/// Movie of the franchise
model Movie {
  /// Identifier of the movie
  id              Int         @id @default(autoincrement())
  /// Title of the movie
  title           String      @unique @db.VarChar(255)
  /// Synopsis of the movie
  synopsis        String
  /// Original air date of the movie
  originalAirDate DateTime
  /// List of digimon that appears in the movie
  digimon         Digimon[]
  /// List of characters that appears in the movie
  characters      Character[]
  /// Universe whom belongs
  universe        Universe    @relation(fields: [universeId], references: [id])
  /// Identifier of the universe whom belongs
  universeId      Int
}

/// Character that appears on the franchise
model Character {
  /// Identifier of the character
  id             Int             @id @default(autoincrement())
  /// Name of the character
  name           String          @unique @db.VarChar(255)
  /// True if the character is a digiDestined, false if not
  isDigiDestined Boolean
  /// List of movies that the character appears
  movies         Movie[]
  /// List of series that the character appears
  series         Series[]
  /// List of episodes that the character appears
  episodes       Episode[]
  /// List of crests that the character has
  crests         Crest[]
  /// List of spirits that belongs to the character
  spirits        Spirit[]
  /// List of digivices that belongs to the character
  digivices      Digivice[]
  /// List of digimentals that belongs to the character
  digimentals    Digimental[]
  /// List of digimon partners that belongs to the character
  partners       Digimon[]
  /// List of universes that the character appears
  universes      Universe[]
  /// List of different names that the character have
  otherNames     CharacterName[]
}

/// Name variation of a character
model CharacterName {
  /// Identifier of the character name
  id          Int       @id @default(autoincrement())
  /// Language wich the character name belongs
  lang        String
  /// Another name of a character
  name        String
  /// Character whom belongs
  character   Character @relation(fields: [characterId], references: [id])
  /// Identifier of the character whom belongs
  characterId Int
}

/// Device that can evolve digimon
model Digivice {
  /// Identifier of the digivice
  id             Int          @id @default(autoincrement())
  /// Character whom belongs
  digiDestined   Character    @relation(fields: [digiDestinedId], references: [id])
  /// Identifier of the character whom belongs
  digiDestinedId Int
  /// List of colors of the digivice
  colors         String[]     @db.VarChar(255)
  /// Type of the digivice
  type           DigiviceType
}

enum DigiviceType {
  CLASSIC
  D_3
  D_ARK
  D_SCANNER
  IC
  BURST
  DARK
  BIO_HYBRID
}

/// Items that representate a digimental or trait
model Crest {
  /// Identifier of the crest
  id            Int         @id @default(autoincrement())
  /// Name of the crest
  name          String      @unique @db.VarChar(255)
  /// Description of the crest
  description   String
  /// List of characters that owns the crest
  digiDestineds Character[]
  /// Digimental whom belongs
  digimental    Digimental  @relation(fields: [digimentalId], references: [id])
  /// Identifier of the digimental whom belongs
  digimentalId  Int         @unique
}

/// Rare and ancient items that are used to armor evolution a digimon
model Digimental {
  /// Identifier of the digimental
  id             Int       @id @default(autoincrement())
  /// Name of the digimental
  name           String    @unique @db.VarChar(255)
  /// Description of the digimental
  description    String
  /// Attribute of the digimental
  attribute      String
  /// Character whom belongs
  digiDestined   Character @relation(fields: [digiDestinedId], references: [id])
  /// Identifier of the character whom belongs
  digiDestinedId Int
  /// List of digimon that holds this digimental
  digimon        Digimon[]
  /// Crest created from this digimental
  crest          Crest?
}

/// Ancient artifacta that is used to evolve into hybrid digimon
model Spirit {
  /// Identifier of the spirit
  id             Int           @id @default(autoincrement())
  /// Element of the spirit
  element        SpiritElement
  /// True if the spirit is human, false if the spirit is beast
  isHuman        Boolean
  /// Character whom belongs
  digiDestined   Character     @relation(fields: [digiDestinedId], references: [id])
  /// Identifier of the character whom belongs
  digiDestinedId Int
  /// Digimon whom belongs
  digimon        Digimon       @relation(fields: [digimonId], references: [id])
  /// Identifier of the digimon whom belongs
  digimonId      Int
}

enum SpiritElement {
  FLAME
  LIGHT
  ICE
  WIND
  THUNDER
  EARTH
  WOOD
  WATER
  STEEL
  DARKNESS
}
