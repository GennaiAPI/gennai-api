datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Field {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(255)
  symbol      String    @db.VarChar(255)
  description String
  digimon     Digimon[]
}

model Rank {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(255)
  description String
  digimon     Digimon[]
}

model Attribute {
  id          Int         @id @default(autoincrement())
  name        String      @unique @db.VarChar(255)
  symbol      String      @db.VarChar(255)
  description String
  strong      Attribute[] @relation("AttrWeakStrong", references: [id])
  weak        Attribute[] @relation("AttrWeakStrong", references: [id])
  digimon     Digimon[]
}

model Type {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.VarChar(255)
  digimon Digimon[]
}

model Digimon {
  id           Int            @id @default(autoincrement())
  slug         String         @unique @db.VarChar(255)
  name         String         @unique @db.VarChar(255)
  isJogress    Boolean        @default(false)
  hasXAntibody Boolean        @default(false)
  rank         Rank           @relation(fields: [rankId], references: [id])
  rankId       Int
  attribute    Attribute      @relation(fields: [attributeId], references: [id])
  attributeId  Int
  type         Type?          @relation(fields: [typeId], references: [id])
  typeId       Int?
  digimental   Digimental?    @relation(fields: [digimentalId], references: [id])
  digimentalId Int?
  movies       Movie[]
  series       Series[]
  episodes     Episode[]
  fields       Field[]
  spirits      Spirit[]
  partners     Character[]
  previous     Digimon[]      @relation("PreviousNext", references: [id])
  next         Digimon[]      @relation("PreviousNext", references: [id])
  groups       DigimonGroup[]
  otherNames   DigimonName[]
}

model DigimonName {
  id        Int     @id @default(autoincrement())
  lang      String
  name      String
  digimon   Digimon @relation(fields: [digimonId], references: [id])
  digimonId Int
}

model DigimonGroup {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  digimon     Digimon[]
}

model Universe {
  id         Int         @id @default(autoincrement())
  name       String      @unique @db.VarChar(255)
  series     Series[]
  movies     Movie[]
  characters Character[]
}

model Series {
  id              Int         @id @default(autoincrement())
  title           String      @unique @db.VarChar(255)
  synopsis        String
  originalAirDate DateTime
  episodes        Episode[]
  digimon         Digimon[]
  characters      Character[]
  universe        Universe    @relation(fields: [universeId], references: [id])
  universeId      Int
}

model Episode {
  id              Int         @id @default(autoincrement())
  title           String      @unique @db.VarChar(255)
  synopsis        String
  originalAirDate DateTime
  digimon         Digimon[]
  characters      Character[]
  series          Series      @relation(fields: [seriesId], references: [id])
  seriesId        Int
}

model Movie {
  id              Int         @id @default(autoincrement())
  title           String      @unique @db.VarChar(255)
  synopsis        String
  originalAirDate DateTime
  digimon         Digimon[]
  characters      Character[]
  universe        Universe    @relation(fields: [universeId], references: [id])
  universeId      Int
}

model Character {
  id             Int             @id @default(autoincrement())
  name           String          @unique @db.VarChar(255)
  isDigiDestined Boolean
  movies         Movie[]
  series         Series[]
  episodes       Episode[]
  crests         Crest[]
  spirits        Spirit[]
  digivices      Digivice[]
  digimentals    Digimental[]
  partners       Digimon[]
  universes      Universe[]
  otherNames     CharacterName[]
}

model CharacterName {
  id          Int       @id @default(autoincrement())
  lang        String
  name        String
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
}

model Digivice {
  id             Int          @id @default(autoincrement())
  digiDestined   Character    @relation(fields: [digiDestinedId], references: [id])
  digiDestinedId Int
  colors         String[]     @db.VarChar(255)
  type           DigiviceType
}

enum DigiviceType {
  CLASSIC
  D_3
  D_ARK
  D_SCANNER
  IC
  BURST
  DARK
  BIO_HYBRID
}

model Crest {
  id            Int         @id @default(autoincrement())
  name          String      @unique @db.VarChar(255)
  description   String
  digiDestineds Character[]
  digimental    Digimental  @relation(fields: [digimentalId], references: [id])
  digimentalId  Int         @unique
}

model Digimental {
  id             Int       @id @default(autoincrement())
  name           String    @unique @db.VarChar(255)
  description    String
  attribute      String
  digiDestined   Character @relation(fields: [digiDestinedId], references: [id])
  digiDestinedId Int
  digimon        Digimon[]
  crest          Crest?
}

model Spirit {
  id             Int           @id @default(autoincrement())
  element        SpiritElement
  isHuman        Boolean
  digiDestined   Character     @relation(fields: [digiDestinedId], references: [id])
  digiDestinedId Int
  digimon        Digimon       @relation(fields: [digimonId], references: [id])
  digimonId      Int
}

enum SpiritElement {
  FLAME
  LIGHT
  ICE
  WIND
  THUNDER
  EARTH
  WOOD
  WATER
  STEEL
  DARKNESS
}
